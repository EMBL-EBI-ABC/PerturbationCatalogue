# polars schema
import polars as pl
polars_schema = {
    "dataset_id": pl.String,
    "cell_id": pl.String,
    "perturbation_name": pl.Categorical(ordering="physical"),
    "perturbed_target_coord": pl.Categorical(ordering="physical"),
    "perturbed_target_number": pl.Int64,
    "perturbed_target_ensg": pl.Categorical(ordering="physical"),
    "perturbed_target_symbol": pl.Categorical(ordering="physical"),
    "perturbed_target_biotype": pl.Categorical(ordering="physical"),
    "guide_sequence": pl.String,
    "perturbation_type_label": pl.Categorical(ordering="physical"),
    "perturbation_type_id": pl.String,
    "timepoint": pl.Categorical(ordering="physical"),
    "treatment_label": pl.Categorical(ordering="physical"),
    "treatment_id": pl.Categorical(ordering="physical"),
    "model_system_label": pl.Categorical(ordering="physical"),
    "model_system_id": pl.String,
    "species": pl.Categorical(ordering="physical"),
    "tissue_label": pl.Categorical(ordering="physical"),
    "tissue_id": pl.Categorical(ordering="physical"),
    "cell_type_label": pl.Categorical(ordering="physical"),
    "cell_type_id": pl.Categorical(ordering="physical"),
    "cell_line_label": pl.Categorical(ordering="physical"),
    "cell_line_id": pl.Categorical(ordering="physical"),
    "sex_label": pl.Categorical(ordering="physical"),
    "sex_id": pl.String,
    "developmental_stage_label": pl.Categorical(ordering="physical"),
    "developmental_stage_id": pl.String,
    "disease_label": pl.Categorical(ordering="physical"),
    "disease_id": pl.Categorical(ordering="physical"),
    "title": pl.String,
    "study_uri": pl.String,
    "year": pl.Int64,
    "first_author": pl.Struct({"first_name": pl.String, "last_name": pl.String}),
    "last_author": pl.Struct({"first_name": pl.String, "last_name": pl.String}),
    "summary": pl.String,
    "replicates": pl.String,
    "number_of_samples": pl.Int64,
    "library_generation_type": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "library_generation_method": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "enzyme_delivery_method": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "library_delivery_method": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "enzyme_integration_state": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "library_integration_state": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "enzyme_expression_control": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "library_expression_control": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "library": pl.Struct(
        {
            "accession": pl.String,
            "grnas_per_target": pl.String,
            "lentiviral_generation": pl.String,
            "library_format": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
            "library_name": pl.String,
            "library_perturbation_type": pl.List(
                pl.Struct({"term_id": pl.String, "term_label": pl.String})
            ),
            "library_scope": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
            "manufacturer": pl.String,
            "total_grnas": pl.String,
            "total_variants": pl.Int64,
        }
    ),
    "readout_dimensionality": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "readout_type": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "readout_technology": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "method_name": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "method_uri": pl.String,
    "sequencing_library_kit": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "sequencing_platform": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "sequencing_strategy": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "software_counts": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "software_analysis": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "reference_genome": pl.Struct({"term_id": pl.String, "term_label": pl.String}),
    "passage_number": pl.String,
    "associated_datasets": pl.List(
        pl.Struct(
            {
                "dataset_accession": pl.String,
                "dataset_description": pl.String,
                "dataset_file_name": pl.String,
                "dataset_uri": pl.String,
            }
        )
    ),
    "score_name": pl.String,
    "score_value": pl.Float32,
}